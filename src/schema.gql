# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Task {
  id: Int!
  user: Int!
  project: Project
  projectId: Int
  title: String!
  details: String
  outcomes: String
  createdDate: String!
  endDate: String!
  isCompleted: Boolean!
}

type Project {
  id: Int!
  user: Int!
  title: String!
  details: String
  createdDate: String!
  endDate: String!
  isCompleted: Boolean!
  tasks: [Task]
}

type PaginatedTasksResponse {
  items: [Task!]!
  total: Int!
}

type PaginatedProjectsResponse {
  items: [Project!]!
  total: Int!
}

type ProjectEvent {
  id: Int!
  taskIds: [Int!]
  title: String!
  details: String
  startTime: DateTime!
  endTime: DateTime!
  isCompleted: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TaskEvent {
  id: Int!
  projectId: Int
  title: String!
  details: String
  outcomes: String
  startTime: DateTime!
  endTime: DateTime!
  isCompleted: Boolean!
}

type Calendar {
  tasks: [TaskEvent]
  projects: [ProjectEvent]
}

type Query {
  allTasks: [Task!]!
  allTasksLimit(limit: Int!): [Task!]!
  paginatedTasks(pageableOptions: PageableOptions): PaginatedTasksResponse!
  allOrphanTasks: [Task!]!
  findOneTaskById(id: Int!): Task!
  allProjects(isCompleted: Boolean!): [Project!]!
  findOneProjectById(id: Int!): Project!
  paginatedProjects(pageableOptions: PageableOptions): PaginatedProjectsResponse!
  getMonth(calendarOptions: CalendarOptions!): Calendar!
}

input PageableOptions {
  search: String
  limit: Int
  offset: Int
  isCompleted: Boolean
  sortOptions: SortOptions
}

input SortOptions {
  field: String!
  ascending: Boolean!
}

input CalendarOptions {
  yearMonth: String!
  yearMonthOverlap: String
}

type Mutation {
  updateTask(createTaskDto: CreateTaskDto!): Task!
  deleteTask(id: Float!): Task!
  createTask(createTaskDto: CreateTaskInput!): Task!
  updateProject(updateProjectDto: UpdateProjectDto!): Project!
  deleteProject(deleteProjectInput: DeleteProjectInput!): Project!
  createProject(createProjectDto: CreateProjectDto!): Project!
  login(password: String!, email: String!): String
  register(data: UserInput!): String
  logout: Boolean!
}

input CreateTaskDto {
  id: Int
  project: CreateProjectDto
  projectId: Int
  title: String!
  details: String
  outcomes: String
  createdDate: String!
  endDate: String!
  isCompleted: Boolean!
}

input CreateProjectDto {
  tasksId: [Int]
  title: String!
  details: String
  createdDate: String!
  endDate: String!
  isCompleted: Boolean!
}

input CreateTaskInput {
  projectId: Int
  title: String!
  details: String
  outcomes: String
  createdDate: String!
  endDate: String!
  isCompleted: Boolean!
}

input UpdateProjectDto {
  id: Int!
  tasksToRemoveId: [Int]
  tasksId: [Int]
  title: String!
  details: String
  createdDate: String!
  endDate: String!
  isCompleted: Boolean!
}

input DeleteProjectInput {
  id: Int!
  deleteTasks: Boolean!
}

input UserInput {
  email: String!
  password: String!
}
